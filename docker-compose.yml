version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: laravel_app
    container_name: laravel_app
    volumes:
      - ./backend:/var/www  # Laravel 소스 코드
    depends_on:
      db:
        condition: service_healthy  # DB가 완전히 실행된 후 Laravel 실행
    networks:
      - app-network
    restart: always  # 컨테이너가 실패해도 자동 재시작

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "8080:80"  # 호스트의 8080 포트를 컨테이너의 80 포트에 매핑
    volumes:
      - ./backend:/var/www  # Laravel 소스 코드
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf  # Nginx 설정 파일
    depends_on:
      - backend  # Laravel 컨테이너가 실행된 후 Nginx 실행
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: react_app
    container_name: react_app
    ports:
      - "3000:3000"  # React 앱을 3000 포트에서 서비스
    volumes:
      - ./frontend:/usr/src/app  # React 소스 코드 볼륨 매핑
    networks:
      - app-network

  db:
    image: postgres:latest
    container_name: postgres_db
    env_file: .env
    volumes:
      - db_data:/var/lib/postgresql/data  # DB 데이터 저장 (컨테이너 삭제 시 데이터 유지)
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    container_name: pgadmin4
    env_file: .env
    ports:
      - "5050:80"  # 호스트의 5050 포트에서 PgAdmin 실행
    volumes:
      - pgadmin_data:/var/lib/pgadmin  # PgAdmin 데이터 저장
    networks:
      - app-network

volumes:
  db_data:  # PostgreSQL 데이터 저장용 볼륨
  pgadmin_data:  # PgAdmin 데이터 저장용 볼륨

networks:
  app-network:  # 모든 서비스가 공유하는 네트워크
